name: Deploy AWS Virtual Desktop

on:
  push:
    branches:
      - main

permissions:
  id-token: write  # Required for OIDC authentication
  contents: read

env:
  AWS_REGION: "eu-central-1"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify IAM Role Permissions
        run: |
          echo "Checking AWS Identity..."
          aws sts get-caller-identity

          echo "Validating IAM Role Permissions..."
          POLICY_ARN=$(aws iam get-role --role-name GitHubActionsOIDC --query 'Role.Arn' --output text)

          REQUIRED_ACTIONS=(
            "ec2:RunInstances"
            "iam:PassRole"
            "lambda:CreateFunction"
            "cloudformation:CreateStack"
            "ssm:PutParameter"
          )

          for ACTION in "${REQUIRED_ACTIONS[@]}"; do
            RESPONSE=$(aws iam simulate-principal-policy \
              --policy-source-arn "$POLICY_ARN" \
              --action-names "$ACTION" \
              --output json)

            if [[ $RESPONSE != *"allowed"* ]]; then
              echo "❌ ERROR: Missing required permission: $ACTION"
              exit 1
            fi
          done

          echo "✅ IAM Role has all required permissions!"

      - name: Install Node.js and AWS CDK
        run: |
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          sudo apt-get install -y nodejs
          npm install -g aws-cdk

      - name: Install dependencies
        run: npm install

      - name: Bootstrap AWS CDK (if needed)
        run: cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }} || echo "CDK already bootstrapped"


      - name: Deploy CDK stack
        run: cdk deploy --require-approval never --region ${{ env.AWS_REGION }}
